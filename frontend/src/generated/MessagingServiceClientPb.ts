/**
 * @fileoverview gRPC-Web generated client stub for messenger
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: messaging.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as messaging_pb from './messaging_pb'; // proto import: "messaging.proto"


export class MessagingServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetThreads = new grpcWeb.MethodDescriptor(
    '/messenger.MessagingService/GetThreads',
    grpcWeb.MethodType.UNARY,
    messaging_pb.GetThreadsRequest,
    messaging_pb.GetThreadsResponse,
    (request: messaging_pb.GetThreadsRequest) => {
      return request.serializeBinary();
    },
    messaging_pb.GetThreadsResponse.deserializeBinary
  );

  getThreads(
    request: messaging_pb.GetThreadsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging_pb.GetThreadsResponse>;

  getThreads(
    request: messaging_pb.GetThreadsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging_pb.GetThreadsResponse) => void): grpcWeb.ClientReadableStream<messaging_pb.GetThreadsResponse>;

  getThreads(
    request: messaging_pb.GetThreadsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging_pb.GetThreadsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messenger.MessagingService/GetThreads',
        request,
        metadata || {},
        this.methodDescriptorGetThreads,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messenger.MessagingService/GetThreads',
    request,
    metadata || {},
    this.methodDescriptorGetThreads);
  }

  methodDescriptorGetMessages = new grpcWeb.MethodDescriptor(
    '/messenger.MessagingService/GetMessages',
    grpcWeb.MethodType.UNARY,
    messaging_pb.GetMessagesRequest,
    messaging_pb.GetMessagesResponse,
    (request: messaging_pb.GetMessagesRequest) => {
      return request.serializeBinary();
    },
    messaging_pb.GetMessagesResponse.deserializeBinary
  );

  getMessages(
    request: messaging_pb.GetMessagesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging_pb.GetMessagesResponse>;

  getMessages(
    request: messaging_pb.GetMessagesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging_pb.GetMessagesResponse) => void): grpcWeb.ClientReadableStream<messaging_pb.GetMessagesResponse>;

  getMessages(
    request: messaging_pb.GetMessagesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging_pb.GetMessagesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messenger.MessagingService/GetMessages',
        request,
        metadata || {},
        this.methodDescriptorGetMessages,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messenger.MessagingService/GetMessages',
    request,
    metadata || {},
    this.methodDescriptorGetMessages);
  }

  methodDescriptorSendMessage = new grpcWeb.MethodDescriptor(
    '/messenger.MessagingService/SendMessage',
    grpcWeb.MethodType.UNARY,
    messaging_pb.SendMessageRequest,
    messaging_pb.SendMessageResponse,
    (request: messaging_pb.SendMessageRequest) => {
      return request.serializeBinary();
    },
    messaging_pb.SendMessageResponse.deserializeBinary
  );

  sendMessage(
    request: messaging_pb.SendMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging_pb.SendMessageResponse>;

  sendMessage(
    request: messaging_pb.SendMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging_pb.SendMessageResponse) => void): grpcWeb.ClientReadableStream<messaging_pb.SendMessageResponse>;

  sendMessage(
    request: messaging_pb.SendMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging_pb.SendMessageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messenger.MessagingService/SendMessage',
        request,
        metadata || {},
        this.methodDescriptorSendMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messenger.MessagingService/SendMessage',
    request,
    metadata || {},
    this.methodDescriptorSendMessage);
  }

  methodDescriptorCreateThread = new grpcWeb.MethodDescriptor(
    '/messenger.MessagingService/CreateThread',
    grpcWeb.MethodType.UNARY,
    messaging_pb.CreateThreadRequest,
    messaging_pb.CreateThreadResponse,
    (request: messaging_pb.CreateThreadRequest) => {
      return request.serializeBinary();
    },
    messaging_pb.CreateThreadResponse.deserializeBinary
  );

  createThread(
    request: messaging_pb.CreateThreadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging_pb.CreateThreadResponse>;

  createThread(
    request: messaging_pb.CreateThreadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging_pb.CreateThreadResponse) => void): grpcWeb.ClientReadableStream<messaging_pb.CreateThreadResponse>;

  createThread(
    request: messaging_pb.CreateThreadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging_pb.CreateThreadResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messenger.MessagingService/CreateThread',
        request,
        metadata || {},
        this.methodDescriptorCreateThread,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messenger.MessagingService/CreateThread',
    request,
    metadata || {},
    this.methodDescriptorCreateThread);
  }

  methodDescriptorJoinThread = new grpcWeb.MethodDescriptor(
    '/messenger.MessagingService/JoinThread',
    grpcWeb.MethodType.UNARY,
    messaging_pb.JoinThreadRequest,
    messaging_pb.JoinThreadResponse,
    (request: messaging_pb.JoinThreadRequest) => {
      return request.serializeBinary();
    },
    messaging_pb.JoinThreadResponse.deserializeBinary
  );

  joinThread(
    request: messaging_pb.JoinThreadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging_pb.JoinThreadResponse>;

  joinThread(
    request: messaging_pb.JoinThreadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging_pb.JoinThreadResponse) => void): grpcWeb.ClientReadableStream<messaging_pb.JoinThreadResponse>;

  joinThread(
    request: messaging_pb.JoinThreadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging_pb.JoinThreadResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messenger.MessagingService/JoinThread',
        request,
        metadata || {},
        this.methodDescriptorJoinThread,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messenger.MessagingService/JoinThread',
    request,
    metadata || {},
    this.methodDescriptorJoinThread);
  }

  methodDescriptorLeaveThread = new grpcWeb.MethodDescriptor(
    '/messenger.MessagingService/LeaveThread',
    grpcWeb.MethodType.UNARY,
    messaging_pb.LeaveThreadRequest,
    messaging_pb.LeaveThreadResponse,
    (request: messaging_pb.LeaveThreadRequest) => {
      return request.serializeBinary();
    },
    messaging_pb.LeaveThreadResponse.deserializeBinary
  );

  leaveThread(
    request: messaging_pb.LeaveThreadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<messaging_pb.LeaveThreadResponse>;

  leaveThread(
    request: messaging_pb.LeaveThreadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: messaging_pb.LeaveThreadResponse) => void): grpcWeb.ClientReadableStream<messaging_pb.LeaveThreadResponse>;

  leaveThread(
    request: messaging_pb.LeaveThreadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: messaging_pb.LeaveThreadResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messenger.MessagingService/LeaveThread',
        request,
        metadata || {},
        this.methodDescriptorLeaveThread,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messenger.MessagingService/LeaveThread',
    request,
    metadata || {},
    this.methodDescriptorLeaveThread);
  }

  methodDescriptorStreamThreadMessages = new grpcWeb.MethodDescriptor(
    '/messenger.MessagingService/StreamThreadMessages',
    grpcWeb.MethodType.SERVER_STREAMING,
    messaging_pb.StreamThreadMessagesRequest,
    messaging_pb.MessageStreamResponse,
    (request: messaging_pb.StreamThreadMessagesRequest) => {
      return request.serializeBinary();
    },
    messaging_pb.MessageStreamResponse.deserializeBinary
  );

  streamThreadMessages(
    request: messaging_pb.StreamThreadMessagesRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<messaging_pb.MessageStreamResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/messenger.MessagingService/StreamThreadMessages',
      request,
      metadata || {},
      this.methodDescriptorStreamThreadMessages);
  }

}

